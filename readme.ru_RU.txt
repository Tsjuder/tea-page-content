# Tea Page Content

## Введение
Tea Page Content - мощный плагин для Wordpress, позволяющий создавать блоки (виджеты и шорткоды) с контентом любой записи, и кастомизировать внешним видом блоков при помощи гибкой системы шаблонов.

## Зачем?
Я создал этот плагин, потому что множество раз возможностей маленьких простых плагинов было недостаточно для моих задач, а большие фреймворки были слишком велики для небольших узкоспециализированных тасков. Этот плагин лежит между упомянутыми крайностями.

## Как?
Просто установите плагин при помощи каталога плагинов Wordpress или вручную (загрузите на сервер, и затем распакуйте), и включите его в панели. Затем создайте виджет, или добавьте шорткод в вашу запись, и наслаждайтесь! Также вы можете кастомизировать внешний вид виджета или шорткода путем изменения встроенных настроек или шаблонов.

## Кстати, насчет шаблонов...
Шаблоны - мощный инструмент для создания полной гибкости. Не нужно создавать фильтры в вашем functions.php, просто выберите встроенный шаблон или создайте собственный! Каждый шаблон - простой php файл, который определяет, как будет выглядеть каждая запись, которую вы выберете. Начиная с версии 1.1.х, шаблоны имеют специальные переменные, которые я назвал переменными уровня шаблона.

## Переменные уровня шаблона
Вкратце, это список параметров, которые определены в заголовке шаблона, и которые могут быть изменены в виджете или шорткоде. Присутствует поддержка значений по умолчанию, имен и нескольких типов параметров: выпадающий список, галочка, текстовая область и текстовое поле. Для примера, в случае bootstrap-шаблона вы можете установить нужное вам количество колонок для каждого размера экрана, или изменить порядок вывода выбранных записей. В случае пользовательских шаблонов, вы можете создать любую переменную и использовать ее в вашем шаблоне для реализации, например, каких-либо условий, управляя ее содержимым из административной панели. Звучит классно, не так ли? Давайте взглянем поближе.

@param color select White|Red|Yellow|Blue // List with all available colors
@param greeting text Hello! // Just text input with default value
@param show-greeting checkbox 0 // Checkbox, unchecked by default.

В приведенном выше примере мы создали несколько переменных. Все переменные должны быть объявлены в соответствии с маской {название} {тип} {значение по умолчанию}. Имена должны быть представлены латинскими буквами, а дефолтное значение может быть словом \ числом либо списком, разделенным символом |. В шаблонах вы можете получать доступ к этим параметрам при помощи специальной переменной $template_variables:

if($template_variables['show-greeting']) {
    echo $template_variables['greeting'];
}

Учтите, что все параметры всегда присутствуют в переменной $template_variables. Это значит, что вам не нужно проверять наличие переменной в $template_variables при помощи isset().


## Переменные уровня страницы
Иногда возникают ситуации, когда вам нужно изменить в виджете миниатюру или вступительный текст записи, оставив ссылку на нее. Порой встроенных средств Wordpress не хватает для реализации данного функционала. Одним из выходов является использование текстового виджета, но с Tea Page Content стало возможным перезаписывать заголовок, отображаемый контент и миниатюру записи, не теряя при этом ссылку на нее. Здорово, не правда ли? Переменные уровня страницы строго предопределены, однако вы можете использовать фильтры, чтобы добавить еще одну переменную.

Чтобы установить переменные для выбранной страницы, нажмите на шестеренку рядом с названием страницы в интерфейсе виджета. Откроется модальное окно, в котором вы сможете задать новый заголовок, отображаемый контент и миниатюру страницы в данном конкретном виджете.

В шаблоне вам будет доступен $entries, объединенный с введенными вами переменными. Иными словами, вы не сможете получить оригинальный заголовок, если он был перезаписан вами ранее. Вы можете изменить это поведение, используя фильтры.


## Обзор шаблонов
### Стандартный
Простой, но эффективный шаблон с одной колонкой. Идеален для сайдбаров или небольших блоков на страницах сайта. Поддерживает два типа разметки: с отступами и стандартный. Разметка "с отступами" означает наличие вокруг контента шаблона отступа размером в 1em. Стандартная разметка не имеет подобных отступов.

### Bootstrap 3.x
Мощный шаблон для сайтов, построенных при помощи фреймворка Bootstrap 3. Этот шаблон имеет шесть переменных. Давайте взглянем на них поближе.

* **container-type** - css класс контейнера. Вы можете выбрать контейнер с фиксированной шириной, либо "резиновый" контейнер в целях адаптивности. Учтите, что обычный контейнер не подходит для сайдбаров.
* **ordering-type** - порядок вывода записей. В Bootstrap есть колонки и строки, т.е. некоторое подобие матрицы, ассоциативного массива. С порядком вывода `horizontal` записи будут выведены по принципу "слева направо", в направлении потока документа. В режиме `transposed` колонки как бы поменяются местами со строками, и наоборот. Матрица будет транспонирована. Учтите, что transposed режим может нарушить порядок записей на более низких разрешениях экрана.
* **column-count-x** определяет количество колонок для каждой контрольной точки. Если вы выбрали 3 колонки, css класс для каждой из них будет col-x-4 (потому что 12 будет поделено на 3). Учтите, что корректное функционирование во многом зависит от вашего выбора количества колонок.

### Bootstrap 4.x
Аналогично Bootstrap 3.x, но для новой версии фреймворка.

### Waterfall
Гибкий многоколоночный шаблон.

## Опции
Есть несколько встроенных опций для большей гибкости, которые могут быть использованы в шорткодах или виджетах.
* **show_page_thumbnail** позволяет вам включить или отключить отображение миниатюры записи. Если вы не хотите видеть миниатюру в виджете или шорткоде, просто снимите галочку с чекбокса (для виджета). По умолчанию - **true**.
* **show_page_content** позволяет вам включить или выключить отображение контента записи. По умолчанию - **true**.
* **show_page_title** позволяет вам включить или выключить отображение заголовка записи. По умолчанию - **true**.
* **linked_page_title** позволяет вам включить или выключить кликабельность заголовка записи. Другими словами, если опция включена, заголовок будет ссылкой на запись. По умолчанию - **false**.
* **linked_page_thumbnail** позволяет вам включить или выключить кликабельность миниатюры записи. Другими словами, если опция включена, миниатюра будет ссылкой на запись. По умолчаню - **false**.
* **order** позволяем вам установить порядок записей. Все посты и страницы сортируются по дате их создания, и вы можете выбрать направление сортировки - в порядке возрастания или в порядке убывания. По умолчанию сортировка производится в **порядке убывания**.
* **template** позволяет вам выбрать лэйаут, который будет выглядеть так, как вы хотите. В шорткоде просто напишите полное имя желаемого шаблона (без расширения), например - `default` или `tpc-your-template-name`. По умолчанию - **default**.
* **posts** позволяем вам выбрать записи, которые вы хотите отобразить. В виджете просто отметьте желаемые посты, в шорткоде - перечислите их ID через запятую. Например, `posts="12,4,63"`.

Обратите внимание: некоторые из этих опций - флаги, реализация которых зависит от шаблона. Это означает, что если вы используете пользовательский шаблон и отключили параметр show_page_content, не забудьте прописать необходимое условие в вашем php-файле шаблона. Без условия контент будет появляться в любом случае. Все встроенные шаблоны поддерживают все опции.

Независимые опции (зависят от плагина): order, template, posts.

Также заметьте, что в шорткоде всегда необходимо явно указывать желаемые опции. Это значит, что если вы не напишете show_page_content="true", значение этой опции будет считаться false вне зависимости от ее дефолтного значения.

## Параметры \ переменные в шаблоне
Перечислю все доступные переменные, к которым вы можете обращаться при создании вашего собственного шаблона.
* **$entries** - Массив всех выбранных записей. Каждый элемент массива также является массивом, и содержит в себе:
    * **title** - Заголовок текущей записи
    * **content** - Контент текущей записи. Когда запись имеет тэг more, будет использована функция `the_content`, в противном случае - `the_excerpt`.
    * **thumbnail** - Миниатюра записи (если есть)
    * **link** - Ссылка на запись
    * **id** - ID записи
* **$count** - Количество переданных плагином записей
* **$instance** - Массив с параметрами. Включает в себя все опции, перечисленные в разделе "Опции" выше.
* **$template_variables** - Массив с переменными шаблона.
* **$caller** - Особый флаг, указывающий, откуда был вызван шаблон: из виджета или из шорткода. Может иметь значения `widget` или `shortcode`.

## Создание кастомных (пользовательских) шаблонов
По умолчанию плагин ищет пользовательские шаблоны в папке с именем "templates" в корне используемой темы. Для создания собственного шаблона просто создайте новый файл с именем `tpc-{template-name}.php`, где `template-name` - желаемое имя вашего шаблона, в указанной выше директории. Каждый шаблон должен быть назван согласно этой маске! После этого добавьте в созданный файл код шаблона. Вы можете использовать любую верстку и любые из перечисленных выше опций для создания собственных условий и разметки. Простейший пример:
```php
<?php if(isset($entries) && count($entries)) : ?>
<?php foreach ($entries as $key => $entry) : ?>
    <div class="tpc-entry-block">
        <h3 class="tpc-title">
            <?php echo $entry['title'] ?>
        </h3>

        <div class="tpc-content post-content">
            <?php echo $entry['content'] ?>
        </div>
    </div>
<?php endforeach; ?>
<?php endif; ?>
```

Отлично! Теперь вы можете выбрать ваш шаблон через выпадающий список (в виджете), либо написать `template="tpc-test-template"` в шорткоде.

## Фильтры и экшены
### tpc_config_array
*Параметры:* `$config` Array Содержит в себе загруженный конфиг в виде ассоциативного массива
Данный фильтр позволяет изменить содержимое конфига перед его использованием, если конфиг был загружен корректно

### tpc_get_template_path
*Параметры:* `$template_path` String Содержит в себе полный, вычисленный путь до шаблона.
Позволяет изменить путь до шаблона и, таким образом, изменить сам шаблон, как в админ-панели, так и на сайте.
Данный фильтр является универсальным, и применяется везде, где вычисляется путь до шаблона.

### tpc_get_admin_template
*Параметры:* `$template_path` String Имя шаблона для админ-панели
Позволяет заменить шаблон для админ-панели собственным. Актуально как для виджета, так и для шорткода.

### tpc_render_template
*Параметры:* `$content` String Загруженный контент шаблона
Позволяет изменять содержимое отрендеренного шаблона перед его выводом. Например, вы можете поменять отдельные тэги при помощи регулярных выражений. Данный фильтр является универсальным и работает как для админ-панели, так и для самого сайта.

### tpc_post_types_operator
*Параметры:* `$operator` String Оператор сравнения для функции get_post_types. Может быть OR или AND
Позволяет изменить оператор выборки для функции get_post_types. Используется в админ-панели для получения списка доступных типов постов.

### tpc_post_types_args
*Параметры:* `$args` Array Массив с параметрами для функции get_post_types. 
Фильтр для изменения списка параметров при получении типов записей. С помощью этого фильтра вы сможете, например, исключить определенный тип записей из выборки. Используется в админ-панели для получения списка доступных типов постов.

### tpc_post_types
*Параметры:* `$types` Array Массив с полученными типами записей
Позволяет изменить финальный список типов записей, уже после их получения.

### tpc_post_params
*Параметры:* `$params` Array Ассоциативный массив с параметрами для функции get_posts
Один из ключевых фильтров, применяется в функции getPosts(). Позволяет отфильтровать массив входных параметров для получения списка записей и последующего вывода их в шаблон. Данный фильтр является универсальным, и используется как в админ-панели, так и в клиентской части сайта.

### tpc_prepared_posts
*Параметры:* `$prepared_posts` Array Ассоциативный массив с результатом работы функции get_posts
Один из ключевых фильтров, применяется в функции getPosts(). Позволяет отфильтровать полученные ранее записи. Параметр `$prepared_posts` представляет собой либо одномерный массив со списком объектов класса WP_Post, либо двухмерный массив, в котором записи разбиты по их типу. Если записей найден оне было, данный параметр будет пустым. Данный фильтр является универсальным, и используется как в админ-панели, так и в клиентской части сайта.

### tpc_get_template_variable
*Параметры:* `$variable` Array Ассоциативный массив с текущей обрабатываемой переменной уровня шаблона
		   `$template` String Имя шаблона, из которого извлекаются переменные
Позволяет фильтровать переменные уровня шаблона на этапе их извлечения из шаблона. Параметр $variable представляет собой массив с несколькими элементами, определенными в конфиге по адресу system.template-variables.mask.

### tpc_get_template_variables
*Параметры:* `$variables` Array Массив с извлеченными и обработанными переменными уровня шаблона
		   `$template` String Имя шаблона, из которого извлекаются переменные
Позволяет фильтровать переменные уровня шаблона после их извлечения и обработки.

### tpc_get_params
*Параметры:* `$params` Array Ассоциативный массив с параметрами
Один из ключевых фильтров, применяется в функции getParams(). Позволяет фильтровать доступные в шаблоне параметры и переменные. Например, вы можете изменить $caller, $instance или любой другой параметр.

### tpc_get_admin_params
*Параметры:* `$params` Array Ассоциативный массив с параметрами
Позволяет фильтровать доступные в шаблоне админ-панели (виджета или шорткода) параметры и переменные.

### tpc_page_variables_raw
*Параметры:* `$query_string` String Переменные уровня страницы в url-encoded формате
		   `$entry_id` Int ID текущей страницы, для которой извлекаются переменные
Фильтр позволяет изменить необработанную строку с переменными уровня страницы перед тем, как она будет распарсена.

### tpc_page_variables
*Параметры:* `$page_variables` Array Массив обработанных параметров уровня страницы
		   `$entry_id` Int ID текущей страницы, для которой были извлечены переменные
Позволяет изменить извлеченные и обработанные переменные перед тем, как они будут переданы в шаблон.

### tpc_template_directories
*Параметры:* `$directories` Array Массив с путями к директориям
Позволяет модифицировать список директорий, где могут находиться шаблоны, в том числе и пользовательские. Применяется в административной панели.

### tpc_get_templates
*Параметры:* `$templates` Array Массив с именами шаблонов
Позволяет управлять списком найденных в директориях шаблонов. Применяется в административной панели.

### tpc_template_name
*Параметры:* `$template` String Имя шаблона
Позволяет модифицировать имя шаблона в виджете непосредственно перед получением пути до шаблона и рендера.